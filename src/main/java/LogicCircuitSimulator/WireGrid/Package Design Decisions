Mamy interface WireGrid, który udostępnia następujące metody:
- setElement() - konieczne ponieważ musimy mieć możliwość edytowania siatki przewodów.
W przeciwnym razie nasz WireGrid byłby immutable i konieczne byłoby każdorazowe kopiowanie całej tablicy przy każdej zmianie elementu,
co wpływa niekorzystnie na ilość zurzytej pamięci, a także na ilość operacji kopiowania.
- resetWiresToLow() - powinno być zawsze wykonane przed propagategenerators(), ale nie jest w samej funkcji propagategenerators(), ponieważ
propagategenerators() może być wykonywana przez developera wielowątkowo. Taka struktura pozwala developerowi na większą kontrolę nad wireGrid.
Inną zaleta jest fakt, że developer nie musi też mieć gotowych wszystkich generatorów w trakcie wywoływania propagateGenerators().
Ta funkcja może być wywoływana stopniowo.
- propagateGenerators() - konieczna, jest to jedno z głównych zadań tego interfejsu.
- getState() - konieczny w przypadku, gdy developer stawia bramki logiczne na mapie i potrzebuje poznać stan sygnału w danym punkcie.
Da się uzyskać ten sam efekt używając funkcji getElement(),
ale jest to funkcjonalność często używana i developer powinien mieć do niej dostęp.
- getElement() - podstwowa funkcjonalność. Developer powinien mieć możliwość sprawdzenia co znajduje się na siatce.
- getIterator() - z definicji nasza siatka jest nieograniczona w górę, więc ciężko mówić o wysokości i szerokości.
Musi być więc dostarczony iterator, który zwróci nam elementy w taki sposób,
jakby siatka była ograniczona przez najdalej położone elementy.
- updateWire() oraz updateCrossing() - podstawowa funkcjonalność
- getWidth oraz getHeight są do iterowania po tablicy. Wywalone bo siatka jest nieskończona.

Mamy klasę Wire. Jest to klasa immutable oraz final służąca za pojemnik na dane. Definiuje ona podstawową jednostkę w siatce.
Zawiera typ połączenia, stan sygnału na prawo od połączenia oraz stan sygnału w dół od połączenia.
Klasa Wire jest wykorzystywana w interfejsie WireGrid, tzn. devloper implementujący interfejs WireGrid musi stosować się do tego schematu.
Jest to najprostszy i najbardziej intuicyjny schemat, który unika powtarzania danych. Moglibyśmy oddzielić typ połączenia oraz stan sygnałów
do dwóch (trzech) różncyh tablic (ogólnie pojemników), jednakże dane te prawie zawsze przetwarzane są razem. Mają również cechę wspólną
tj położenie w siatce. Dlatego też umieszczone zostały w jednym obiekcie.

Mamy interfejs Iterator2D, który oprócz zwykłych funkcji oferuje również funkcję Position, która pozwala ustalić gdzie dany element się znajduje.
Jest to zrobione tak dlatego, ponieważ developer musi wiedzieć gdzie dany element się znajduje. Iterator ukrywa takie dane.
Dlaczego iterator jest obecny? Być może developer chce przejść po obiektach w specyficzny sposób. Tego nie wiemy. WireGrid to jest tablica
z pewnymi dodatkowymi funkcjami, więc dostała iterator.

Iterator konkretny jest non-static ponieważ potrzebuje dane z wewnątrz klasy. W przeciwnym wypadku potrzebowaliśmy przekazać instację tablicy
przez konstruktor ale iterator by nie miał dostępu do wewnętrznej tablicy. (ma dostęp taki jak developer).

WireGrid ma być nieograniczony w góre, więc potrzebne były metody do zarządzania pamięcią. te metody znalazły się w osobnej klasie.
(Single Responsibility Principle)

Mamy interface UpUnbound2DList. Ma podstawowe metody.

Ten interace jest implementowany w taki sposob, że jeżeli pobieramy element spoza zainicjalizowanej przestrzeni to dostajemy element
domyślny. Jeżeli ustawiamy element poza tą przestzrenią to tablica się automatycznie zwiększa.
W przeciwnym wypadku tablica zahcowuje sie jak normalna tablica.

Position jest osobno bo
1. ArrayList ma osobno
2. Indeksy tablicy mogą przechowywać informacje o obiekcie (u nas pozycje na mapie), gdyby były razem infomacja o pozycji by się duplikowała w przypadku
implementacji tablicowej (a chcemy żeby programista miał jak najwięskzą swobodę)

WireGrid ma getElement bo może się przydać. Jest to bardzo podstawowa funkcja.

UnboundList zwraca empty gdy nie ma elementu
Nie null bo Optional lepszy.
Wiregrid getElement jest odpowiedzialny za zamiane tego elementu na element defualtowy.

Vector2D musi mieć equals i hash bo hashmap

WireNode zawiera position bo logic element zawiera position, to jest właściwość tego noda wiec powinno byc w nodzie